import logging
from telegram import (Update, InlineKeyboardButton, InputFile,
                      InlineKeyboardMarkup, LabeledPrice) 
from telegram.ext import (filters, MessageHandler,
                          PreCheckoutQueryHandler, CallbackQueryHandler, 
                          ApplicationBuilder, ContextTypes, 
                          CommandHandler)

from chain import get_chain_response
from database import save_message_to_db, connect_2_db
from transcribe_audio import oga_2_mp3_2_text
from text_to_speech import get_audio

import os
from datetime import datetime
from dotenv import load_dotenv

# setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
# Load environment variables from .env file
load_dotenv()

TELEGRAM_BOT = os.getenv('TELEGRAM_BOT')
STRIPE_TEST_PAY = os.getenv('STRIPE_TEST_PAY')

last_user_message_id = None
last_bot_message_id = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, 
                                   text="I'm a bot, please talk to me!")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # Delete messages from the chat
    async for message in context.bot.get_chat(chat_id=chat_id).history():
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message.message_id)
        except Exception as e:
            logging.warning(f"Could not delete message {message.message_id}: {e}")

    # Delete messages from the database
    _, message_history = connect_2_db()
    message_history.update_one(
        {'user_id': str(chat_id)},
        {'$set': {'messages': []}}
    )

    await context.bot.send_message(chat_id=chat_id, text="Conversation cleared.")

async def delete_last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_user_message_id, last_bot_message_id

    chat_id = update.effective_chat.id

    if last_user_message_id is not None:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=last_user_message_id)
        except Exception as e:
            logging.warning(f"Could not delete user message {last_user_message_id}: {e}")

    if last_bot_message_id is not None:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=last_bot_message_id)
        except Exception as e:
            logging.warning(f"Could not delete bot message {last_bot_message_id}: {e}")

    _, message_history = connect_2_db()

    message_history.update_one(
        {'user_id': str(chat_id)},
        {'$pop': {'messages': 1}}
    )
    message_history.update_one(
        {'user_id': str(chat_id)},
        {'$pop': {'messages': 1}}
    )

    await context.bot.send_message(chat_id=chat_id, text="Last message deleted.")

async def delete_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    _, message_history = connect_2_db()

    message_history.update_one(
        {'user_id': str(chat_id)},
        {'$set': {'messages': []}}
    )

    await context.bot.send_message(chat_id=chat_id, text="All messages deleted.")

def is_username_allowed(username):
    allowed_usernames = os.getenv('ALLOWED_TELEGRAM_USERNAMES')

    if allowed_usernames == '*' or not allowed_usernames:
        return True
    else:
        allowed_usernames_list = [user.strip() for user in allowed_usernames.split(',')]
        return username in allowed_usernames_list

async def text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_user_message_id, last_bot_message_id

    username = update.effective_user.username

    if not is_username_allowed(username):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="You are not allowed to use this bot.")
        return

    last_user_message_id = update.message.message_id

    user_text = update.message.text
    user_firstname = update.effective_user.first_name
    user_id = str(update.effective_user.id)

    users, message_history = connect_2_db()

    model_res = get_chain_response(user_id, user_text, user_firstname)

    save_message_to_db(user_id, user_text, model_res)

    bot_message = await update.message.reply_text(text=model_res)
    last_bot_message_id = bot_message.message_id

async def audio_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_user_message_id, last_bot_message_id

    username = update.effective_user.username

    if not is_username_allowed(username):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="You are not allowed to use this bot.")
        return

    last_user_message_id = update.message.message_id

    user_id = str(update.effective_user.id)
    user_firstname = update.effective_user.first_name

    users, message_history = connect_2_db()

    file_id = update.message.voice.file_id
    new_file = await context.bot.get_file(file_id)
    file_path = f"{file_id}.oga"
    await new_file.download(custom_path=file_path)

    user_text = oga_2_mp3_2_text(file_id)

    if not user_text:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="Sorry, I couldn't transcribe your audio.")
        return

    model_res = get_chain_response(user_id, user_text, user_firstname)

    save_message_to_db(user_id, user_text, model_res)

    bot_message = await update.message.reply_text(text=model_res)
    last_bot_message_id = bot_message.message_id

async def deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("Price: $10", callback_data='10'),
            InlineKeyboardButton("Price: $20", callback_data='20'),
        ],
        [
            InlineKeyboardButton("Price: $30", callback_data='30'),
            InlineKeyboardButton("Price: $5000", callback_data='5000'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('Please choose a price:', reply_markup=reply_markup)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    selected_price = int(query.data)

    title = "Service Access"
    description = f"Access to the bot services for ${selected_price}"
    payload = "Custom-Payload"
    provider_token = STRIPE_TEST_PAY
    currency = "USD"
    prices = [LabeledPrice("Service Access", selected_price * 100)]

    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=title,
        description=description,
        payload=payload,
        provider_token=provider_token,
        currency=currency,
        prices=prices,
        start_parameter="test-payment"
    )
    await query.answer()

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if query.invoice_payload != "Custom-Payload":
        await query.answer(ok=False, error_message="Something went wrong...")
    else:
        await query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total_amount = update.message.successful_payment.total_amount
    duration_minutes = total_amount // 100

    user_id = str(update.effective_user.id)

    users, _ = connect_2_db()

    expiration_time = datetime.utcnow() + timedelta(minutes=duration_minutes)

    users.update_one(
        {'user_id': user_id},
        {'$set': {'access_expires_at': expiration_time}},
        upsert=True
    )

    await update.message.reply_text(f"Thank you for your payment! You can now use the bot until {expiration_time} UTC.")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="Sorry, I didn't understand that command.")

if __name__ == '__main__':
    application = ApplicationBuilder().token(TELEGRAM_BOT).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('clear', clear))
    application.add_handler(CommandHandler('delete', delete_last))
    application.add_handler(CommandHandler('delete_all', delete_all))
    application.add_handler(CommandHandler('deposit', deposit))

    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), text_input))
    application.add_handler(MessageHandler(filters.VOICE & (~filters.COMMAND), audio_input))

    application.add_handler(CallbackQueryHandler(handle_button))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    application.run_polling()
